# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install .[test]
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Set up cache for CMake FetchContent python cache
      uses: actions/cache@v3
      with:
        path: |
          build/_deps
        key: ${{ runner.os }}-fetchcontent-python-${{ hashFiles('CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-fetchcontent-python-

    - name: Test with pytest
      run: |
        # build cpp extension first
        mkdir build && cd build && cmake .. && cmake --build . && cd ..
        PYTHONPATH=./build:src/craftground coverage run --source=src/craftground -m pytest tests/python/unit/
    
    - name: coverage
      run: |
        coverage report -m
        COV=$(coverage report | tail -1 | awk '{print $NF}')
        echo "COVERAGE=$(echo ${COV})" >> $GITHUB_ENV
        REF=${{ github.ref }}
        IFS='/' read -ra PATHS <<< "$REF"
        BRANCH_NAME="${PATHS[1]}_${PATHS[2]}"
        echo $BRANCH_NAME
        echo "BRANCH=$(echo ${BRANCH_NAME})" >> $GITHUB_ENV
    
    - name: create status badge
      uses: schneegans/dynamic-badges-action@v1.0.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 8497c0c395a8d6b18d1e81f05ff57dba
        filename: craftground__${{ env.BRANCH }}.json
        label: Test Coverage
        message: ${{ env.COVERAGE }}
        color: green
        namedLogo: jest

  build-package:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
    - name: Build package
      run: |
        python -m build
    # - name: Publish package
    #   run: |
    #     python -m twine upload --repository pypi dist/*
