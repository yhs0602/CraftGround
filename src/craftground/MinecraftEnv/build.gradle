plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm" version "2.0.0"
//    id "com.google.protobuf" version "0.9.2"
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

shadowJar {
    archiveClassifier.set('')
}

def findVcpkgRoot() {
    try {
        def vcpkgRoot = System.getenv('VCPKG_ROOT')
        if (vcpkgRoot) {
            return vcpkgRoot
        }
        def os = org.gradle.internal.os.OperatingSystem.current()

        if (os.isWindows()) {
            def process = new ProcessBuilder("cmd", "/c", "where vcpkg").start()
            process.waitFor()
            def output = process.inputStream.text.trim()
            if (output) {
                def vcpkgDir = new File(output).getParentFile()
                return vcpkgDir.absolutePath
            } else {
                throw new RuntimeException("Cannot find vcpkg root")
            }
        } else {
            def process = new ProcessBuilder("bash", "-c", "which vcpkg").start()
            process.waitFor()
            def output = process.inputStream.text.trim()
            if (output) {
                def vcpkgDir = new File(output).getParentFile()
                return vcpkgDir.absolutePath
            } else {
                throw new RuntimeException("Cannot find vcpkg root")
            }
        }
    } catch (Exception e) {
        println "Cannot find vcpkg root: " + e
        return null
    }
}

tasks.register('configureCppProject', Exec) {
    def useConda = System.getenv('CRAFTGROUND_USE_CONDA')?.toBoolean() ?: false
    def os = org.gradle.internal.os.OperatingSystem.current()
    def vcpkgRoot = findVcpkgRoot()
    def vcpkgToolchainFile = vcpkgRoot ? "${vcpkgRoot}/scripts/buildsystems/vcpkg.cmake" : null
    project.logger.lifecycle('Use conda: ' + useConda + ', vcpkg root: ' + vcpkgRoot)
    if (os.isWindows() && vcpkgToolchainFile && file(vcpkgToolchainFile).exists()) {
        project.logger.lifecycle('Using vcpkg toolchain file: ' + vcpkgToolchainFile)
        if (useConda) {
            commandLine 'cmake', '-DCMAKE_TOOLCHAIN_FILE=' + vcpkgToolchainFile, '-DCMAKE_PREFIX_PATH=$CONDA_PREFIX', 'src/main/cpp'
        } else {
            commandLine 'cmake', '-DCMAKE_TOOLCHAIN_FILE=' + vcpkgToolchainFile, 'src/main/cpp'
        } 
    } else {
        project.logger.lifecycle('Using default cmake, not using vcpkg')
        if (useConda) {
            commandLine 'cmake', '-DCMAKE_PREFIX_PATH=$CONDA_PREFIX', 'src/main/cpp'
        } else {
            commandLine 'cmake', 'src/main/cpp'
        }
    }
    
    inputs.dir("src/main/cpp")
    outputs.files("MakeFile", "CMakeCache.txt", "cmake_install.cmake")
    outputs.dir("CMakeFiles")
}

tasks.register('compileCpp', Exec) {
    commandLine 'cmake', '--build', '.',  '--config', 'Release', '--parallel', '8'
    inputs.dir("src/main/cpp")
    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isLinux()) {
        outputs.file("libnative-lib.so")
    } else if (os.isMacOsX()) {
        outputs.file("libnative-lib.dylib")
    } else if (os.isWindows()) {
        outputs.files(file("Debug/native-lib.dll"), file("Release/native-lib.dll"))
    }
    dependsOn 'configureCppProject'

    // Copy the built native library to the project root (Only for Windows)
    doLast {
        if (os.isWindows()) {
            // Copy the built native library to the project root
            def debugOutput = new File("Debug/native-lib.dll")
            def releaseOutput = new File("Release/native-lib.dll")
            def targetDir = new File("./native-lib.dll") // Copy to the project root

            if (releaseOutput.exists()) {
                copy {
                    from releaseOutput
                    into targetDir.parentFile
                }
                println "Copied ${releaseOutput} to ${targetDir}"
            } else if (debugOutput.exists()) {
                copy {
                    from debugOutput
                    into targetDir.parentFile
                }
                println "Copied ${debugOutput} to ${targetDir}"
            } else {
                throw new RuntimeException("Cannot find the built native library")
            }
        }
    }
}

tasks.named('runClient').configure {
    dependsOn compileCpp
}

tasks.named('build').configure {
    dependsOn compileCpp
}

tasks.named('runClient') {
    doFirst {
        def maxMemory = System.getenv("CRAFTGROUND_JVM_MAX_MEMORY") ?: "3G"
        def enabledJmx = System.getenv("CRAFTGROUND_JVM_JMX_ENABLED") ?: "false"
        def nativeMemoryTracking = System.getenv("CRAFTGROUND_JVM_NATIVE_TRACKING") ?: "summary"
        jvmArgs += "-Djava.library.path=${projectDir}"
        jvmArgs += "-XX:+UnlockExperimentalVMOptions"
        jvmArgs += "-XX:G1NewSizePercent=40"
        jvmArgs += "-XX:G1MaxNewSizePercent=50"
        jvmArgs += "-XX:G1ReservePercent=20"
        jvmArgs += "-XX:MaxTenuringThreshold=1"
        jvmArgs += "-XX:SurvivorRatio=32"
        jvmArgs += "-XX:+AlwaysPreTouch"
        jvmArgs += "-Xmx${maxMemory}" // Max memory from environment variable
        jvmArgs += "-XX:NativeMemoryTracking=${nativeMemoryTracking}"
        jvmArgs += "-XX:MaxDirectMemorySize=512m"
        jvmArgs += "-XX:MaxMetaspaceSize=1024m" // 1G
        jvmArgs += "-XX:MaxRAM=10G"
        if (enabledJmx.toBoolean()) {
            def jmxPort = System.getenv("CRAFTGROUND_JVM_JMX_PORT") ?: "9010"
            def jmxHost = System.getenv("CRAFTGROUND_JVM_JMX_HOST") ?: "localhost"
            jvmArgs += "-Dcom.sun.management.jmxremote"
            jvmArgs += "-Dcom.sun.management.jmxremote.port=${jmxPort}"
            jvmArgs += "-Dcom.sun.management.jmxremote.ssl=false"
            jvmArgs += "-Dcom.sun.management.jmxremote.authenticate=false"
            jvmArgs += "-Djava.rmi.server.hostname=${jmxHost}"
        }
//        environment.put("LD_PRELOAD", "libjemalloc.so")
    }
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url "https://maven.flashyreese.me/releases"
    }
    maven {
        url "https://maven.flashyreese.me/snapshots"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    // https://mvnrepository.com/artifact/maven.modrinth/sodium
//    modApi include("maven.modrinth:sodium:mc1.20-0.4.10")
    // Download this mods from curseforge and modrinth, and put it in the mods folder
//    modRuntimeOnly "maven.modrinth:lithium:mc1.21-0.12.7"
//    modRuntimeOnly "curse.maven:ferritecore-fabric-459857:5434182"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "io.grpc:grpc-kotlin-stub:1.3.0"
    implementation 'com.google.protobuf:protobuf-kotlin:4.29.2'
    implementation "com.github.ben-manes.caffeine:caffeine:3.1.8"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

//protobuf {
//    protoc {
//        artifact = "com.google.protobuf:protoc:3.22.3"
//    }
//    plugins {
//        grpc {
//            artifact = "io.grpc:protoc-gen-grpc-java:1.54.1"
//        }
//        grpckt {
//            artifact = "io.grpc:protoc-gen-grpc-kotlin:1.3.0:jdk8@jar"
//        }
//    }
//    generateProtoTasks {
//        all().forEach {
//            it.plugins {
//                grpc
//                grpckt
//            }
//            it.builtins {
//                kotlin
//            }
//        }
//    }
//}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "21"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "21"
    }
}

tasks.named('clean') {
    doLast {
        delete "CMakeFiles", "MakeFile", "CMakeCache.txt", "cmake_install.cmake", "libnative-lib.so", "libnative-lib.dylib", "native-lib.dll"
    }
}
